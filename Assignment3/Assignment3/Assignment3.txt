1. What are the six combinations of access modifier keywords and what do they do? 
public: Accessible from anywhere in the code.
private: Accessible only within the class where it is defined.
protected: Accessible within the class and its derived classes.
internal: Accessible only within the same assembly.
protected internal: Accessible within the same assembly or derived classes.
private protected: Accessible within the same class or derived classes in the same assembly.

2. What is the difference between the static, const, and readonly keywords when applied to a type member?
static: Belongs to the type itself rather than an instance. Shared among all instances.
const: Compile-time constant. Its value cannot be changed after being assigned and is implicitly static.
readonly: Runtime constant. Its value can only be assigned during declaration or in a constructor.

3. What does a constructor do?
Create initialization for a new object.

4. Why is the partial keyword useful?
The partial keyword allows a class, struct, or interface to be split across multiple files. It’s useful in large projects or for autogenerated code.

5. What is a tuple?
A tuple is a lightweight data structure that can hold multiple items of different types. 
(a:"a", b:"b")

6. What does the C# record keyword do?
The record keyword defines a reference type that is immutable by default and is used for data modeling. It provides value-based equality and concise syntax for defining objects.

7. What does overloading and overriding mean?
Overriding: happens between parent and child class that have the same method signature(name, parameters, access modifier) but different implementation
Overloading: happens within one class with same access modifier and method name, but different parameters to have different implemetation

8. What is the difference between a field and a property?
Field: A variable declared directly in a class.
Property: A method-like construct to control access(get, set) to fields.

9. How do you make a method parameter optional?
Use a default parameter value.

10. What is an interface and how is it different from abstract class?
Interface: A contract that defines methods and properties but does not provide implementation.
Abstract Class: Can contain both abstract methods (no implementation) and concrete methods (with implementation).
Difference: A class can implement multiple interfaces but inherit only one abstract class.

11. What accessibility level are members of an interface?
public

12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
True

13. True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
True

14. True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
False

15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
False

16. True/False. Normal (non-abstract) methods can be used in an abstract class. 
True

17. True/False.Derived classes can override methods that were virtual in the base class. 
True

18. True/False. Derived classes can override methods that were abstract in the base class. 
True

19. True/False.In a derived class, you can override a method that was neither virtual non abstract in the base class.
False

20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
False

21. True/False. A class that implements an interface is allowed to have other members that aren’t defined in the interface.
True

22. True/False. A class can have more than one base class.
False

23. True/False. A class can implement more than one interface.
True